<?xml version="1.0" encoding="euc-jp"?>
<chapter id='desc_search'>
<title>
  認識処理・探索
</title>

<sect1><title>アルゴリズム</title>
<para>
  Julius の認識処理は2パス構成です．まず第1パスで入力全体を完全に処理
  し，中間結果を出力します．モデルは単語2-gramと単語HMMの木構造ネット
  ワークを用います．解探索はleft-to-rightにフレーム同期ビーム探索を行
  います．第2パスでは3-gramを用いて逆向きに探索を行い，より精度の高い
  認識結果を求めます．第1パスの中間結果を絞り込み＋先読み情報として用
  い，単語単位のスタックデコーディングを行います．
</para>
<para>
 音素環境依存モデル(triphone)を用いたときは，第1パスおよび第2パスで単
 語間の音素環境依存を考慮します．音響モデルのモデル名が 
 <literal>+</literal> や<literal>-</literal>を含む場合，コンテキスト依
 存モデルとして扱われる．<option>-no_ccd</option>,
 <option>-force_ccd</option>で明示的に指定することもできる．
</para>
</sect1>

<sect1><title>探索用パラメータ</title>
<para>
  言語重みと挿入ペナルティ（N-gramの場合，文法の場合）
</para>
<para>
  パフォーマンス調整：ビーム幅．2種類ある．第1パスのビーム幅は
  <option>-b</option>で指定できる．この値は第1パスの解探索の幅を与える
  もの であり，認識精度や処理時間に大きく影響する．小さい値を与えるこ
  とで計算幅を狭くして処理を高速にできるが，正しい最適解が得られない探
  索誤りが生じ，認識誤りにつながる．大きい値を指定すると広い幅を探索す
  るため，最終的に最適解が得られる可能性が高くなるが，そのぶん処理時間
  は長くなる．
</para>
<para>
  第2パスのスタックデコーディングにおける展開制限幅を
  <option>-b2</option>で指定できる．ある長さの単語展開回数がこの指定し
  た上限値に達したら，それより単語数が短い仮説の展開を行わないようにな
  る．これによって，スタックデコーディングが同じ場所で似た単語を展開し
  つづけて前に進まない状況を回避する．小さすぎる値は最尤仮説の発見を妨
  げ精度の低下を招くが，大きすぎると探索が終わりにくくなり，処理時間が
  かかるようになる．
</para>
<para>
  <option>-sb</option>で第2パスの仮説尤度計算時のスコア幅を指定できる．
  仮説展開時に仮説ごとの音響尤度を更新するが，その際にフレームごとのそ
  れまでの仮説の最大値から一定幅より下のパスを計算から除外することで音
  響モデル照合のコストを下げる効果が有る．小さい値にするほど第2パスの
  音響尤度計算量が少なくなるが計算誤りにより仮説のスコアが得られなくな
  る可能性が高くなる．最適値は音響モデルからの対数尤度のレンジによる．
</para>
<para>
  <option>-s</option>で仮説のスタックサイズを指定する．スタックサイ
  ズは，スタックデコーダが保持する仮説スタックのサイズである．小さすぎ
  ると探索誤りが起こりやすくなるため，大きい値を与えるとよいが，大きす
  ぎるとメモリを多く食う．
</para>
<para>
  <option>-m</option>で探索打ち切りのための仮説展開回数のしきい値を指
  定する．Julius は，指定した数の文仮説が見付かる前に仮説展開回数がこ
  のしきい値に達したとき，探索を強制終了する．探索終了時に一つも文仮説
  が得られていない場合は，探索失敗（解なし）となる．大きい値を与えるほ
  ど，あきらめずに探索を続けるようになるが，コストがかかる．
</para>
<para>
  文法では，Julius は通常，文法で予測される全ての単語について，仮説を
  展開して探索を行う．これに対して，<option>-looktrellis</option>を指
  定することで，仮説展開を第1パスの結果単語トレリス上に残った単語のみ
  に絞るようにできる．特に数千語以上の大語彙において計算の高速化と安定
  化が期待できるが，短い単語の削除誤りが増えることがある．
</para>
<para>
  その他：<option>-lookuprange</option><option>-nlimit</option>
</para>
</sect1>

<sect1><title>出力形式</title>

<sect2><title>N-best形式</title>
<para>
<option>-n</option>で指定された数の文仮説数が見付かるまで探索を行う．
また<option>-output</option>で見つかった仮説のうち実際に出力する上位仮
説数を指定する．Julius では，ヒューリスティックの非適格性より，最初に見
つかる仮説が最尤でないことがしばしばあるが，この値を3から 5 程度にして
おくことで，最尤解を正しく得られる可能性が高くなる．大きい値を与える程
第2 パスの探索時間が長くなる．なお，第2パスの再探索は第1パスで残った仮
説集合に対して行われるため，多くのバリエーションの仮説を残すには第1パ
スのビーム幅も大きくしておくほうがよい．
</para>
<para>
アラインメント
</para>
</sect2>

<sect2><title>単語ラティス形式</title>
<para>
単語グラフ（ラティス）を出力できる．第2パスのスタックデコーディングに
おいて有望であった仮説を残すことで構成する．オプション指定時，第2パス
の探索アルゴリズムはグラフ出力全体が考慮したものに変更されるため，ここで
出てくるN-best文候補は通常のN-bestと異なる点に注意．

  グラフは第2パスの解探索過程から単語の確定・出力を行う．このた
  め，十分な大きさのグラフを得るためには探索をある程度以上長く行
  う必要がある．<option>-n</option>も参照のこと．

ポストプロセス：<option>-graphrange</option>, <option>-graphcut</option>,
<option>-graphboundloop</option>, <option>-graphsearchdelay</option>
</para>
</sect2>

<sect2><title>Confusion Network</title>
<para>
</para>
</sect2>
</sect1>

<sect1><title>信頼度</title>
<para>
</para>
</sect1>

<sect1><title>アルゴリズムオプション</title>

<sect2><title>ショートポーズセグメンテーション</title>
<para>
  ショートポーズセグメンテーションは，無音区間検出に基づいて入力を細か
  く区切ることにより逐次的な仮説確定を行う．これによって，長時間音声の
  逐次認識を可能にする．
</para>
<para>
  ショートポーズセグメンテーション有効時，Julius は「無音単語」につい
  て特別な処理を行う．ここで無音単語とは，入力の無音部（非音声部）に対
  応すべき認識辞書中の単語エントリを指す．Juliusは第1パスにおいてフレー
  ムごとの最尤仮説をチェックし，無音単語が一位仮説となるフレームが一定
  時間以上続くとそれを無音区間と判定し，入力をそこで区切る．そして，区
  切られた区間について第2パスを実行し，仮説を確定した後，区切った部分
  から認識を再開する．これによって，短い無音区間で認識処理を区切って確
  定しながら漸次的に認識を進めていくことができる．
</para>
<para>
  <literal>configure</literal>に<literal>--enable-decoder-vad</literal>を
  つけてコンパイルした場合，このショートポーズセグメンテーションは
  デコーダベースのVADに拡張される．（アルゴリズム解説）
</para>
<para>
  無音区間判定のための「無音単語」の定義：

  認識辞書において，無音モデルのみを読みとする単語が「無音単語」であり，
  それらはショートポーズ判定に用いられる．実際の認識ではどの無音単語が
  一位になるか分からない．このため，基本的には音響モデル内で定義されて
  いる無音のモデルを全て指定する必要がある．

  文法を用いた認識では<option>-spmodel</option> で指定されるモデルのみ
  を読みとする単語が無音単語とされる．また，N-gramではこれに加えて
  <option>-silhead</option> および <option>-siltail</option> で指定さ
  れる単語も無音単語として扱われる．

  上記に当てはまらない場合，<option>-pausemodels</option>で
  明示的に無音モデル名を指定することができる．
</para>
</sect2>
</sect1>








<section><title>Gaussian pruning</title>
<para>
  音響モデルがtied-mixture ベースの混合分布モデルである場合，Julius は 
  Gaussian pruning と呼ばれる計算量削減手法を有効にする．Gaussian
  pruning では，各フレームにおいてコードブック中の下位の分布のみを計算
  から除外することで，音響尤度計算量を削減する．
</para>
</section>

<section><title>単語間トライフォン計算</title>
<para>
  Julius では音素環境依存モデル (triphone) 使用時，第1パスにおいて単語
  間の音素環境依存性について近似計算を行う．
</para>
</section>

</chapter>
