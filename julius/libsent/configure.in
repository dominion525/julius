dnl Copyright (c) 1991-2006 Kawahara Lab., Kyoto University
dnl Copyright (c) 2000-2005 Shikano Lab., Nara Institute of Science and Technology
dnl Copyright (c) 2005-2006 Julius project team, Nagoya Institute of Technology
dnl All rights reserved
dnl
dnl  $Id: configure.in,v 1.11 2006/12/26 03:16:13 sumomo Exp $
dnl

dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/phmm/outprob.c)
AC_CONFIG_HEADER(include/sent/config.h)
AC_CONFIG_AUX_DIR(../support)

VERSION=3.5.3

dnl Checks for options
# specify mic type
AC_ARG_WITH(mictype,
[  --with-mictype=TYPE     specify mic I/O (oss|alsa|freebsd|coreaudio|sol2|sun4|irix|esd|sp|portaudio|pa-oss|pa-winmm|pa-dsound)],,with_mictype=auto)

# NetAudio support
AC_ARG_WITH(netaudio-dir,
[  --with-netaudio-dir=DIR DatLink/NetAudio include/lib are in DIR],,with_netaudio_dir=auto)

dnl pthread support
AC_ARG_ENABLE(pthread,
[  --disable-pthread       [debug] do not use pthread for speech input],
want_pthread=$enableval
,want_pthread=yes)

dnl use addlog array function
AC_ARG_ENABLE(addarray,
[  --disable-addarray      [debug] do not use addlog_array() function],
want_addarray=$enableval
,want_addarray=yes)

dnl extend to int
AC_ARG_ENABLE(words-int,
[  --enable-words-int      use integer instead of unsigned short for word ID
                           to extend vocabulary limit to 2^31=2G words],
want_words_int=$enableval
,want_words_int=no)

dnl class N-gram support
AC_ARG_ENABLE(class-ngram,
[  --disable-class-ngram   disable class N-gram support],
use_class_ngram=$enableval
,use_class_ngram=yes)

dnl enable fork for adinnet
AC_ARG_ENABLE(fork,
[  --enable-fork           enable process forking on adinnet],
use_fork=$enableval
,use_fork=no)

dnl sin/cos table for MFCC calc
AC_ARG_ENABLE(mfcc-table,
[  --disable-mfcc-table    disable sin/cos table for MFCC calculation],
use_mfcc_table=$enableval
,use_mfcc_table=yes)

dnl enable/disable use of zlib library
AC_ARG_ENABLE(zlib,
[  --disable-zlib          disable zlib library],
use_zlib=$enableval
,use_zlib=yes)

dnl select character set conversion method or disable
AC_ARG_ENABLE(charconv,
[  --enable-charconv={auto|iconv|libjcode|win|no} specify character conversion],
use_charconv=$enableval
,use_charconv=auto)

dnl multipath version
AC_ARG_ENABLE(multipath,
[  --enable-multipath      Compile as multipath version],
want_multipath=$enableval
,want_multipath=no)

if test "$want_addarray" = yes; then
	AC_DEFINE(USE_ADDLOG_ARRAY)
fi
if test "$want_words_int" = yes; then
	AC_DEFINE(WORDS_INT)
fi
if test "$use_class_ngram" = yes; then
	AC_DEFINE(CLASS_NGRAM)
fi
if test "$use_fork" = yes; then
	AC_DEFINE(FORK_ADINNET)
fi
if test "$use_mfcc_table" = yes; then
	AC_DEFINE(MFCC_SINCOS_TABLE)
fi
if test "$want_multipath" = yes; then
	AC_DEFINE(MULTIPATH_VERSION)
	VERSION="${VERSION}-multipath"
fi

dnl Checks for system.
AC_CANONICAL_HOST

dnl Checks for optimization flag
AC_MSG_CHECKING([host specific optimization flag])
if test -z "$CFLAGS" ; then
    OPTFLAG=../support/cflags.${host_cpu}-${host_vendor}-${host_os}
    if test -f "$OPTFLAG" ; then
	. $OPTFLAG
	AC_MSG_RESULT([$OPTFLAG])
    else
	AC_MSG_RESULT([no])
    fi
else
    AC_MSG_RESULT([skipped])
fi

dnl Checks for compiler.
AC_PROG_CC
AC_PROG_CPP

dnl Checks for programs.
AC_PATH_PROG(RM, rm)
AC_PATH_PROG(AR, ar)
AC_PROG_RANLIB

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_CONST
dnl AC_TYPE_SIZE_T
AC_MSG_CHECKING([for socklen_t])
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>
],[socklen_t dummy;],
AC_DEFINE(HAVE_SOCKLEN_T)
AC_MSG_RESULT([yes]),
AC_MSG_RESULT([no]))

dnl Checks for library functions.
dnl AC_PROG_GCC_TRADITIONAL
dnl AC_FUNC_VPRINTF
dnl AC_CHECK_FUNCS(strdup strstr)
AC_CHECK_FUNC(gethostbyname,,AC_CHECK_LIB(nsl,gethostbyname))
AC_CHECK_FUNC(connect,,AC_CHECK_LIB(socket, connect))
AC_CHECK_FUNCS(strcasecmp)
AC_CHECK_FUNCS(sleep)
case "$host_os" in
mingw*)
	EXTRALIB="$EXTRALIB -lwsock32"
	;;
esac

dnl Checks for default audio input API (order is important)
if test "$with_mictype" = auto; then
  AC_MSG_CHECKING(for microphone type)
  altype=no
  case "$host_os" in
  linux*)
#	# ALSA
#	AC_TRY_CPP([#include <sys/asoundlib.h>],altype=alsa)
#	if test "$altype" = no; then
	  # OSS
	  AC_TRY_CPP([#include <sys/soundcard.h>],altype=oss)
#	fi
	;;
  freebsd*)
	# FreeBSD (snd driver)
	AC_TRY_CPP([#include <machine/soundcard.h>],altype=freebsd)
	;;
  darwin*)
        # MacOSX (CoreAudio)
	AC_TRY_CPP([#include <CoreAudio/CoreAudio.h>],altype=coreaudio)
	;;
  solaris2*)
	# Solaris2.x Built-in Audio
	AC_TRY_CPP([#include <sys/audioio.h>],altype=sol2)
	;;
  sunos4*)
	# SunOS4 Audio
	AC_TRY_CPP([#include <multimedia/libaudio.h>],altype=sun4)
	;;
  irix6*)
 	# O2 (SGI IRIX6.3)
	AC_TRY_CPP([#include <audio.h>],altype=irix)
	;;
#  osf*)
#	# Digital Unix 4.0 --- not yet
#	AC_TRY_CPP([#include <mme/mme_api.h>],altype=osf1)
#	;;
  cygwin*|mingw*)
      # minGW - portaudio (auto select winmm / dsound)
      altype=portaudio
      ;;
  esac
  AC_MSG_RESULT($altype)
else
  altype=$with_mictype
fi

# if default is portaudio, guess WinMM / DirectSound / OSS / Solaris
case $altype in
    portaudio)
      case "$host_os" in
        linux*)
	  altype="pa-oss"
          ;;
	solaris*)
	  altype="pa-solaris"
	  ;;
        cygwin*|mingw*)
	  AC_CHECK_LIB(dsound,main,
	      AC_CHECK_HEADERS(DSound.h,
	          altype="pa-dsound",
		altype="pa-winmm"),
	    altype="pa-winmm")
          ;;
      esac
      ;;
esac

# set appropritate parameters for the determined API
case $altype in
    sp)
      aldesc="spAudio"
      ADINOBJ=src/adin/adin_mic_sp.o
      AC_DEFINE(USE_MIC)
      AC_DEFINE(USE_SPLIB)
      case "$host_os" in
        linux*)
          AC_CHECK_LIB(spa.linux, spInitAudio,
              SOUNDLIB="-lspa.linux -lspb.linux",
            AC_CHECK_LIB(spa.linux-glibc, spInitAudio,
                SOUNDLIB="-lspa.linux-glibc -lspb.linux-glibc",
              AC_MSG_ERROR([spAudio library not found!]),
              [-lspb.linux-glibc -lm]),
            [-lspb.linux -lm])
          ;;
        solaris2*)
          SOUNDLIB="-L/usr/local/lib -lspa.sun -lspb.sun"
          ;;
        sunos4*)
          SOUNDLIB="-L/usr/local/lib -lspa.sun -lspb.sun -laudio"
          ;;
        irix6*)
          SOUNDLIB="-L/usr/local/lib -lspa.sgi -lspb.sgi -laudio"
          ;;
        cygwin*)
          SOUNDLIB="-L/usr/local/lib -lspa.win -lspb.win -lwinmm -liconv"
          ;;
        darwin*)
          SOUNDLIB="-arch ppc -framework CoreAudio -framework Carbon -L/usr/local/lib -lspa.mac -lspb.mac"
          ;;
      esac
      ;;
    pa-*)
      aldesc="PortAudio library"
      ADINOBJ="src/adin/pa/pa_lib.o src/adin/pa/pa_convert.o src/adin/pa/pa_trace.o src/adin/pa/pablio.o src/adin/pa/ringbuffer.o"
      AC_DEFINE(USE_MIC)
      case "$altype" in
        pa-winmm)
	  aldesc="$aldesc (WinMM)"
          ADINOBJ="$ADINOBJ src/adin/pa/pa_win_wmme.o"
          SOUNDLIB="-lwinmm"
          ;;
        pa-dsound)
	  aldesc="$aldesc (DirectSound)"
          ADINOBJ="$ADINOBJ src/adin/pa/dsound_wrapper.o src/adin/pa/pa_dsound.o"
          SOUNDLIB="-lwinmm -ldsound"
          ;;
        pa-oss)
	  aldesc="$aldesc (Unix/OSS)"
          ADINOBJ="$ADINOBJ src/adin/pa/pa_unix.o src/adin/pa/pa_unix_oss.o"
          SOUNDLIB="-lpthread"
          ;;
        pa-solaris)
	  aldesc="$aldesc (Solaris)"
          ADINOBJ="$ADINOBJ src/adin/pa/pa_unix.o src/adin/pa/pa_unix_solaris.o"
          SOUNDLIB="-lpthread"
          ;;
      esac
      ADINOBJ="$ADINOBJ src/adin/adin_portaudio.o"
      ;;
    oss)
	aldesc="Open Sound System compatible"
	ADINOBJ=src/adin/adin_mic_linux_oss.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB=""
	;;
    alsa)
	aldesc="Advanced Linux Sound Architecture"
	ADINOBJ=src/adin/adin_mic_linux_alsa.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB="-lasound"
	;;
    esd)
	aldesc="EsoundD - The Enlightened Sound Daemon"
	ADINOBJ=src/adin/adin_esd.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB="-lesd"
	;;
    freebsd)
	aldesc="FreeBSD snd driver"
	ADINOBJ=src/adin/adin_mic_freebsd.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB=""
	;;
    coreaudio)
	aldesc="MacOSX CoreAudio"
	ADINOBJ=src/adin/adin_mic_darwin_coreaudio.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB="-Wl,-framework -Wl,CoreServices -Wl,-framework -Wl,CoreAudio -Wl,-framework -Wl,AudioUnit -Wl,-framework -Wl,AudioToolbox"
	;;
    sol2)
	aldesc="Solaris2.x audio interface"
	ADINOBJ=src/adin/adin_mic_sol2.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB=""
	;;
    sun4)
	aldesc="SunOS4.x audio interface"
	ADINOBJ=src/adin/adin_mic_sun4.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB="-laudio"
	;;
    irix)
	aldesc="IRIX6.x audio interface"
	ADINOBJ=src/adin/adin_mic_o2.o
	AC_DEFINE(USE_MIC)
	SOUNDLIB="-laudio" ;;
#    osf1)
#	aldesc="Digital/Unix 4.0"
#	ADINOBJ=src/adin/adin_mic_osf1.o
#	AC_DEFINE(USE_MIC)
#	SOUNDLIB="-L/usr/opt/MME242/lib -lmme")
#	;;
    *)
	aldesc="no support"
	AC_MSG_ERROR([mictype not supported, or specified type not exist])
	;;
esac

dnl check for NetAudio support
if test "$with_netaudio_dir" = auto ; then
	AC_MSG_CHECKING([for DatLink/NetAudio support])
else
	AC_MSG_CHECKING([for DatLink/NetAudio support on ${with_netaudio_dir}])
fi
TMPCPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I${with_netaudio_dir}/include"
use_netaudio=no
AC_TRY_CPP([#include <netaudio.h>],
	use_netaudio=yes
	AC_DEFINE(USE_NETAUDIO)
	SOUNDINC="-I${with_netaudio_dir}/include"
	ADINOBJ="$ADINOBJ src/adin/adin_netaudio.o src/adin/adin_na.o "
	SOUNDLIB="$SOUNDLIB -L${with_netaudio_dir}/lib -lnetaudio -lsupport")
AC_MSG_RESULT($use_netaudio)
CPPFLAGS="$TMPCPPFLAGS"
EXTRAOBJ="$EXTRAOBJ $ADINOBJ"

dnl check for file decompression using zlib
have_zlib=no;
if test "$use_zlib" = yes; then
  AC_CHECK_LIB(z, deflate,
    AC_CHECK_HEADERS(zlib.h,
      have_zlib=yes;
      gzdesc="zlib library";
      EXTRALIB="$EXTRALIB -lz"
      AC_DEFINE(HAVE_ZLIB)))
  if test "$have_zlib" = no; then
      AC_MSG_WARN([not found])
      use_zlib=no;
  fi
fi
dnl next, check for built-in file decompression using gzip
if test "$use_zlib" = no; then
  AC_CHECK_PROG(GZIP, gzip, found, no)
  if test "$GZIP" = no; then
    gzdesc="none";
    AC_MSG_WARN([not found, compressed file input disabled])
  else
    gzdesc="gzip command";
    AC_DEFINE(ZCAT, ["gzip -d -c"])
  fi
fi

dnl check for iconv library
dnl macro "AM_ICONV" will check for availability of iconv function,
dnl and if found, define HAVE_ICONV.  If the iconv function is defined
dnl in libiconv, it defines LIBICONV="-liconv".
dnl it also detects if function is const and set the result to ICONV_CONST.
dnl it also adds "--with-libiconv-prefix=DIR" option.

dnl check for charset conversion library
AC_MSG_CHECKING([for charset conversion])
LIBJCODEOBJ=""
case "$host_os" in
mingw*)
	dnl libjcode (EUC|JIS->SJIS) + Win32 API (SJIS->UTF8)
	AC_DEFINE(USE_WIN32_MULTIBYTE)
        LIBJCODEOBJ="src/libjcode/libjcode.o src/libjcode/detect.o"
	ccdesc="Win32 API + libjcode"
	AC_DEFINE(CHARACTER_CONVERSION)
	AC_MSG_RESULT([win32])
	;;
*)
	case "$use_charconv" in
	auto)
            dnl iconv -> libjcode
            AM_ICONV
            if test "$am_cv_func_iconv" = yes; then
               EXTRALIB="$EXTRALIB $LIBICONV"
               ccdesc="iconv library"
	       AC_MSG_RESULT([iconv])
            else
               AC_DEFINE(USE_LIBJCODE)
               LIBJCODEOBJ="src/libjcode/libjcode.o src/libjcode/detect.o"
               ccdesc="built-in libjcode (Japanese codes only)"
	       AC_MSG_RESULT([libjcode])
            fi
            AC_DEFINE(CHARACTER_CONVERSION)
            ;;
        iconv)
            dnl force iconv
            AM_ICONV
            if test "$am_cv_func_iconv" = yes; then
               EXTRALIB="$EXTRALIB $LIBICONV"
               AC_DEFINE(CHARACTER_CONVERSION)
               ccdesc="iconv libraru"
	       AC_MSG_RESULT([iconv])
            else
               ccdesc="no"
               AC_MSG_ERROR([iconv function not found!])
	       AC_MSG_RESULT([no])
            fi
            ;;
        libjcode)
            dnl force libjcode
            AC_DEFINE(USE_LIBJCODE)
            LIBJCODEOBJ="src/libjcode/libjcode.o src/libjcode/detect.o"
            ccdesc="built-in libjcode (Japanese codes only)"
            AC_DEFINE(CHARACTER_CONVERSION)
	    AC_MSG_RESULT([libjcode])
            ;;
        no)
            dnl disable
            ccdesc="no"
	    AC_MSG_RESULT([no])
            ;;
        *)
            dnl error
            AC_MSG_ERROR([wrong argument for charconv!])
        esac
esac

dnl check for POSIX thread support
if test "$want_pthread" = yes; then
  case "$host_os" in
  freebsd*)
	# FreeBSD
	AC_MSG_CHECKING([for linking POSIX threaded process])
 	ac_save_CFLAGS="$CFLAGS"
 	CFLAGS="$CFLAGS -pthread"
 	AC_TRY_LINK([#include <pthread.h>],[pthread_equal(NULL,NULL);],
     	    use_pthread=yes
     	    AC_DEFINE(HAVE_PTHREAD)
	    SOUNDINC="$SOUNDINC -pthread",
   	  use_pthread=no
	)
	CFLAGS="$ac_save_CFLAGS"
	;;
  *)
	# other with libpthread
	AC_MSG_CHECKING([for POSIX thread library in -lpthread])
	ac_save_LIBS="$LIBS"
	LIBS="$LIBS -lpthread"
	AC_TRY_LINK([#include <pthread.h>],[pthread_equal(NULL,NULL);],
	    use_pthread=yes
	    AC_DEFINE(HAVE_PTHREAD)
	    EXTRALIB="$EXTRALIB -lpthread",
	  use_pthread=no
	)
	LIBS="$ac_save_LIBS"
  esac
  AC_MSG_RESULT("$use_pthread")
else
  use_pthread=no
fi

dnl check for libsndfile
wavefile_support="RAW and WAV only"
have_libsndfile=no
AC_CHECK_LIB(sndfile, sf_open,
  AC_CHECK_HEADERS(sndfile.h,
    wavefile_support='various formats by libsndfile ver.1'
    AC_DEFINE(HAVE_LIBSNDFILE)
    AC_DEFINE(HAVE_LIBSNDFILE_VER1)
    EXTRALIB="$EXTRALIB -lsndfile"
    have_libsndfile=yes))
if test "$have_libsndfile" = no; then
  AC_CHECK_LIB(sndfile, sf_open_read,
    AC_CHECK_HEADERS(sndfile.h,
      wavefile_support='various formats by libsndfile ver.0'
      AC_DEFINE(HAVE_LIBSNDFILE)
      EXTRALIB="$EXTRALIB -lsndfile"
      have_libsndfile=yes))
fi
if test "$have_libsndfile" = no; then
  AC_MSG_WARN([libsndfile enables AIFF AU SND NIST format for Julius.
It's available at http://www.mega-nerd.com/libsndfile/])
fi

dnl cygwin needs extra iconv library
case "$host_os" in
  cygwin*)
    EXTRALIB="$EXTRALIB -liconv"
    ;;
esac

dnl substitute some definitions in libsent-config
AC_SUBST(VERSION)
AC_SUBST(altype)
AC_SUBST(aldesc)
AC_SUBST(use_netaudio)
AC_SUBST(use_pthread)
AC_SUBST(wavefile_support)
AC_SUBST(use_class_ngram)
AC_SUBST(use_fork)
AC_SUBST(gzdesc)
AC_SUBST(ccdesc)

dnl define configuration descriptions
AC_DEFINE_UNQUOTED(LIBSENT_VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(AUDIO_API_NAME, "$altype")
AC_DEFINE_UNQUOTED(AUDIO_API_DESC, "$aldesc")
AC_DEFINE_UNQUOTED(AUDIO_FORMAT_DESC, "$wavefile_support")
AC_DEFINE_UNQUOTED(GZIP_READING_DESC, "$gzdesc")
AC_DEFINE_UNQUOTED(CHARSET_CONVERSION_DESC, "$ccdesc")

dnl substitute in Makefile
AC_SUBST(EXTRAOBJ)
AC_SUBST(EXTRALIB)
AC_SUBST(SOUNDINC)
AC_SUBST(SOUNDLIB)
AC_SUBST(LIBJCODEOBJ)

AC_OUTPUT_COMMANDS(
[chmod +x libsent-config
./libsent-config --info
],
altype=$altype
aldesc="$aldesc"
use_netaudio=$use_netaudio
use_pthread=$use_pthread
wavefile_support="$wavefile_support"
gzdesc="$gzdesc"
ccdesc="$ccdesc"
)
AC_OUTPUT(Makefile libsent-config)
